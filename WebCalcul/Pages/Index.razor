@using WebCalcul.Data
@page "/"

<h1 class="app-name">WebCalcul App</h1>

<div class="calculator-grid">
	<div class="info-display">
		<div class="info-text">@info</div>
		<div class="output-text">@output</div>

	</div>

	<input type="text" class="display-input" @bind="input" readonly />

	<!-- Memory and operations -->
	<div class="button @MemoryButtonClass" @onclick="MRC">MCR</div>
	<div class="button" @onclick="MemMinus">M-</div>
	<div class="button" @onclick="MemPlus">M+</div>
	<div class="button operator" @onclick="Div">/</div>
	<div class="button operator" @onclick="Percentage">%</div>


	<div class="button" @onclick="() => AppendNumber(7)">7</div>
	<div class="button" @onclick="() => AppendNumber(8)">8</div>
	<div class="button" @onclick="() => AppendNumber(9)">9</div>
	<div class="button operator" @onclick="Pow">x</div>
	<div class="button operator" @onclick="Root">√</div>

	<div class="button" @onclick="() => AppendNumber(4)">4</div>
	<div class="button" @onclick="() => AppendNumber(5)">5</div>
	<div class="button" @onclick="() => AppendNumber(6)">6</div>
	<div class="button operator" @onclick="Sum">+</div>
	<div class="button operator" @onclick="Clear">C</div>

	<div class="button" @onclick="() => AppendNumber(1)">1</div>
	<div class="button" @onclick="() => AppendNumber(2)">2</div>
	<div class="button" @onclick="() => AppendNumber(3)">3</div>
	<div class="button operator" @onclick="Sub">-</div>
	<div class="button operator" @onclick="ClearEnd">CE</div>

	<!-- Bottom row -->
	<div class="button doubled-row" @onclick="() => AppendNumber(0)">0</div>
	<div class="button operator" @onclick="InsertDot">.</div>
	<div class="button operator doubled-row" @onclick="CalculateResult">=</div>
</div>


@code {
	private string input = string.Empty;
	private string output = string.Empty;
	private string result = string.Empty;
	private string info = string.Empty;
	private bool operatorActive = false;
	private bool resultIteration = false;
	private bool percentageIteration = false;
	private bool memoryActive = false;
	private Calcul cal = new Calcul();

	/// <summary>
	/// Choose which color to use on button
	/// </summary>
	private string MemoryButtonClass => cal.AnyMinMemStore() || cal.AnyPlusMemStore() ? "memory-filled" : "memory-empty";

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		input = cal.A.ToString();
	}

	private decimal StringToDecimal(string input)
	{
		decimal outputDecimal = 0;
		try
		{
			outputDecimal = decimal.Parse(input);
		}
		catch (FormatException)
		{
			Clear();
			output = "Error while parsing expression :" + input;
			return 0;
		}
		return outputDecimal;
	}

	private void AppendNumber(decimal number)
	{
		resultIteration = false;
		info = string.Empty; //clears info line after user add number into input
		if (operatorActive)
		{
			input = string.Empty;
			operatorActive = false;
			percentageIteration = false;
		}
		// if (memoryActive)
		// {

		// 	return;
		// }

		if (input == "0") input = string.Empty;
		input += number.ToString();
	}

	private void ApplyOperandOfCal(ref Calcul cal)
	{
		try
		{
			cal.ApplyOperand();
		}
		catch (DivideByZeroException)
		{
			Clear();
			info = "You cannot divide by 0!";
		}
		catch (OverflowException)
		{
			Clear();
			info = "You exceed range of decimal data type!";
		}
	}

	private void CalculateResult()
	{
		if (string.IsNullOrEmpty(input) && !resultIteration) { cal.B = cal.A; resultIteration = true; }

		else if (!cal.CheckOperatorActive()) return;

		else if (!resultIteration )
		{
			resultIteration = true;
			cal.B = StringToDecimal(input);
		}

		output = cal.A.ToString() + cal.ActiveOperator + cal.B.ToString() + '=';
		ApplyOperandOfCal(ref cal);
		input = cal.A.ToString();
	}

	private void AppendOperation(char operation)
	{
		if (resultIteration)
		{
			SetOperatorAndOutput(operation);

			input = string.Empty;
			resultIteration = false;
		}
		else if (operatorActive)
		{
			SetOperatorAndOutput(operation);
		}
		else
		{
			cal.B = StringToDecimal(input);
			ApplyOperandOfCal(ref cal);
			SetOperatorAndOutput(operation);

			input = cal.A.ToString();
			resultIteration = false;
		}
	}

	private void SetOperatorAndOutput(char oper)
	{
		cal.ActiveOperator = oper;
		operatorActive = true;
		output = cal.A.ToString() + oper;
	}

	/// <summary>
	/// Function clears variables
	/// </summary>
	private void Clear()
	{
		input = "0";
		result = string.Empty;
		output = string.Empty;
		cal = new Calcul();
		operatorActive = false;
		percentageIteration = false;
		info = string.Empty;
		memoryActive = false;
	}


	private void Sum(MouseEventArgs e)
	{
		AppendOperation('+');
	}
	private void Sub(MouseEventArgs e)
	{
		AppendOperation('-');
	}
	private void Pow(MouseEventArgs e)
	{
		AppendOperation('*');
	}
	private void Div(MouseEventArgs e)
	{
		AppendOperation('/');
	}
	private void Percentage(MouseEventArgs e)
	{
		if (!cal.CheckOperatorActive())
		{
			info = "There is nothing to calculate percentage of!";
			input = 0.ToString();
			return;
		}
		else
		{
			if (!percentageIteration)
			{
				cal.B = StringToDecimal(input);
				percentageIteration = true;
			}

			output = cal.A.ToString() + cal.ActiveOperator + cal.B.ToString() + '%';
			try
			{
				input = cal.ApplyPercentageOperand().ToString();
			}
			catch (OverflowException)
			{
				Clear();
				info = "You exceed range of decimal data type!";
			}
			operatorActive = true;
		}
	}

	private void Root(MouseEventArgs e)
	{
		cal.A = StringToDecimal(input);
		output = '√' + cal.A.ToString();
		try
		{
			cal.ApplyPercentage();
			operatorActive = true;
		}
		catch (OverflowException)
		{
			Clear();
			info = "You cannot square root number lower than 0!";
		}
		input = cal.A.ToString();
	}

	private void InsertDot(MouseEventArgs e)
	{
		if (!input.Contains(','))
		{
			input += ',';
		}
		else
		{
			info = "fractions already active!";
		}
	}

	/// <summary>
	/// This had to be changed from lsat char remove to whole input remove due to complicated logic.. TODO
	/// </summary>
	private void ClearEnd(MouseEventArgs e)
	{
		if (resultIteration)
		{
			Clear();
			return;
		}
		input = "0";
	}

	/// <summary>
	/// Remove last character from input
	/// </summary>
	private void RemoveLastCharacter(string input, out string output)
	{
		output = string.Empty;
		if (!string.IsNullOrEmpty(input))
		{
			output = input.Remove(input.Length - 1);
		}
	}
	private void MemMinus(MouseEventArgs e)
	{
		if (!memoryActive || !operatorActive) { memoryActive = true; operatorActive = true; }

		cal.AppendIntoMinMem(StringToDecimal(input));
		info = "Value vas added into memory for minus numbers!";
	}
	private void MemPlus(MouseEventArgs e)
	{
		if (!memoryActive || !operatorActive) { memoryActive = true; operatorActive = true; }
		cal.AppendIntoPlusMem( StringToDecimal(input));
		info = "Value vas added into memory for plus numbers!";
	}

	/// <summary>
	/// Doubletap removes memory flag
	/// </summary>
	private void MRC(MouseEventArgs e)
	{
		if (e.Detail == 2)
		{
			memoryActive = false;
			cal.RemoveMemory();
			info = "Memory cleared!";
			return;
		}

		try
		{
			output = cal.ResultFromMemory().ToString();
		}
		catch (OverflowException)
		{
			Clear();
			info = "You cannot square root number lower than 0!";
		}
		
		input = cal.A.ToString();

		info = "Result from memory:";
	}
}
