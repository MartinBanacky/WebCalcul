@using WebCalcul.Data
@page "/"

<style>
	.calculator-input {
		text-align: right;
	}
</style>

<h3>Calculator</h3>

<input type="text" class="calculator-input" @bind="input" readonly />
<p>Calculate: @output</p>

@for (int i = 0; i <= 9; i++)
{
    var num = i;
    if (i == 0)
    {
        <br />
    }
	if (i == 1)
	{
		<br />
	}
    <Button @onclick="() => AppendNumber(num)">@num</Button>
    if (i % 3 == 0)
    {
        <br />
    }
}

<button @onclick="CalculateResult">=</button>
<button @onclick="Clear">C</button>
<button @onclick="Sum">+</button>
<button @onclick="Sub">-</button>
<button @onclick="Pow">*</button>
<button @onclick="Div">/</button>
<button @onclick="ClearEnd">CE</button>
<button @onclick="InsertDot">,</button>
<button @onclick="Percentage">%</button>
<button @onclick="Root">√</button>
<button @onclick="MemMinus">M-</button>
<button @onclick="MemPlus">M+</button>
<button @onclick="MRC">MRC</button>



<p>Result: @result</p>
<p>Info: @info</p>


@code {
	private string input = string.Empty;
	private string output = string.Empty;
	private string result = string.Empty;
	private string info = string.Empty;
	private bool operatorActive = false;
	private bool resultIteration = false;
	private bool percentageIteration = false;
	private bool memoryActive = false;
	private Calcul cal = new Calcul();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		input = cal.A.ToString();
	}

	private double StringToDouble(string input)
	{
		double outputDouble = 0;
		try
		{
			outputDouble = double.Parse(input);
		}
		catch (FormatException)
		{
			Clear();
			output = "Error while parsing expression :" + input;
			return 0;
		}
		return outputDouble;
	}

	private void AppendNumber(double number)
	{
		resultIteration = false;
		info = string.Empty; //clears info line after user add number into input
		if (operatorActive)
		{
			input = string.Empty;
			operatorActive = false;
			percentageIteration = false;
		}
		// if (memoryActive)
		// {

		// 	return;
		// }

		if (input == "0") input = string.Empty;
		input += number.ToString();
	}

	private void ApplyOperandOfCal(ref Calcul cal)
	{
		try
		{
			cal.ApplyOperand();
		}
		catch (DivideByZeroException)
		{
			Clear();
			info = "You cannot divide by 0!";
		}
	}

	private void CalculateResult()
	{
		if (string.IsNullOrEmpty(input) && !resultIteration) { cal.B = cal.A; resultIteration = true; }

		else if (!cal.CheckOperatorActive()) return;

		else if (!resultIteration )
		{
			resultIteration = true;
			cal.B = StringToDouble(input);
		}

		output = cal.A.ToString() + cal.ActiveOperator + cal.B.ToString() + '=';
		ApplyOperandOfCal(ref cal);
		input = cal.A.ToString();
	}

	//TODO vyriešiť case keď vynasobime na strasne velke cislo xxe ** 100+ a vymazeme input tak sa nic nedeje a ked adme nulu vysledok je -0!


	private void AppendOperation(char operation)
	{
		if (resultIteration)
		{
			SetOperatorAndOutput(operation);

			input = string.Empty;
			resultIteration = false;
		}
		else if (operatorActive)
		{
			SetOperatorAndOutput(operation);
		}
		else
		{
			cal.B = StringToDouble(input);
			ApplyOperandOfCal(ref cal);
			SetOperatorAndOutput(operation);

			input = cal.A.ToString();
			resultIteration = false;
		}
	}

	private void SetOperatorAndOutput(char oper)
	{
		cal.ActiveOperator = oper;
		operatorActive = true;
		output = cal.A.ToString() + oper;
	}

	/// <summary>
	/// Function clears variables
	/// </summary>
	private void Clear()
	{
		input = "0";
		result = string.Empty;
		output = string.Empty;
		cal = new Calcul();
		operatorActive = false;
		percentageIteration = false;
		info = string.Empty;
		memoryActive = false;
	}

	//Funcs for Appending operations onto buttons

	private void Sum(MouseEventArgs e)
	{
		AppendOperation('+');
	}
	private void Sub(MouseEventArgs e)
	{
		AppendOperation('-');
	}
	private void Pow(MouseEventArgs e)
	{
		AppendOperation('*');
	}
	private void Div(MouseEventArgs e)
	{
		AppendOperation('/');
	}
	private void Percentage(MouseEventArgs e)
	{
		if (!cal.CheckOperatorActive())
		{
			info = "There is nothing to calculate percentage of!";
			input = 0.ToString();
			return;
		}
		else
		{
			if (!percentageIteration)
			{
				cal.B = StringToDouble(input);
				percentageIteration = true;
			}

			output = cal.A.ToString() + cal.ActiveOperator + cal.B.ToString() + '%';
			input = cal.ApplyPercentageOperand().ToString();
			operatorActive = true;
		}
	}

	private void Root(MouseEventArgs e)
	{
		cal.A = StringToDouble(input);
		output = '√' + cal.A.ToString();
		cal.ApplyPercentage();
		input = cal.A.ToString();
	}

	private void InsertDot(MouseEventArgs e)
	{
		if (!input.Contains(','))
		{
			input += ',';
		}
		else
		{
			info = "fractions already active!";
		}
	}

	/// <summary>
	/// This had to be changed from lsat char remove to whole input remove due to complicated logic.. TODO
	/// </summary>
	private void ClearEnd(MouseEventArgs e)
	{
		if (resultIteration)
		{
			Clear();
			return;
		}
		input = "0";
	}

	/// <summary>
	/// Remove last character from input
	/// </summary>
	private void RemoveLastCharacter(string input, out string output)
	{
		output = string.Empty;
		if (!string.IsNullOrEmpty(input))
		{
			output = input.Remove(input.Length - 1);
		}
	}
	private void MemMinus(MouseEventArgs e)
	{
		if (!memoryActive || !operatorActive) { memoryActive = true; operatorActive = true; }
		
		cal.AppendIntoMinMem( StringToDouble(input));
		info = "value vas added into memory for minus numbers!";
	}
	private void MemPlus(MouseEventArgs e)
	{
		if (!memoryActive || !operatorActive) { memoryActive = true; operatorActive = true; }
		cal.AppendIntoPlusMem( StringToDouble(input));
		info = "value vas added into memory for minus numbers!";
	}

	/// <summary>
	/// Doubletap removes memory flag
	/// </summary>
	private void MRC(MouseEventArgs e)
	{
		if (string.IsNullOrEmpty(input)) { memoryActive = false; return; }
		output = cal.ResultFromMemory().ToString();
		input = cal.A.ToString();

		info = "Result from memory:";
	}
}
