@page "/"

<h3>Calculator</h3>

<input type="text" @bind="input" readonly />
<p>Calculate: @output</p>

@for (int i = 0; i <= 9; i++)
{
    var num = i;
    if (i == 0)
    {
        <br />
    }
	if (i == 1)
	{
		<br />
	}
    <Button @onclick="() => AppendNumber(num)">@num</Button>
    if (i % 3 == 0)
    {
        <br />
    }
}

<button @onclick="CalculateResult">=</button>
<button @onclick="Clear">C</button>
<button @onclick="Sum">+</button>
<button @onclick="Sub">-</button>
<button @onclick="Pow">*</button>
<button @onclick="Div">/</button>
@* <button @onclick="BracketL">(</button>
<button @onclick="BracketR">)</button> *@
<button @onclick="ClearEnd">CE</button>


<p>Result: @result</p>
<p>Info: @info</p>


@code {
	private string input = string.Empty;
	private string output = string.Empty;
	private string result = string.Empty;
	private string info = string.Empty;
	private bool operatorActive = false;
	private char operatorChar = '\0';
	private float numA;
	private float numB;


	private float ApplyOperand(float a, float b, char operand)
	{
		switch (operand)
		{
			case '+': return a = a + b;
			case '-': return a = a - b;
			case '*': return a = a * b;
			case '/': 
				if (b != 0 && a != 0)
				{
					return a = a / b;	
				}
				else throw new DivideByZeroException("Division by zero is not allowed.");
			default: return 0;
		}
	}

	private float StringToFloat(string input)
	{
		float outputFloat = 0;
		try
		{
			outputFloat = float.Parse(input);
		}
		catch (FormatException)
		{
			Console.WriteLine($"Unable to parse '{input}'");
			return 0;
		}
		return outputFloat;
	}

	private void ExecuteExpression(ref float numberA, ref float numberB, bool operatorActiveSign, string inputField, char operatorCharacter)
	{
		var numBUncut = string.Empty;
		numBUncut += inputField;
		if (operatorActiveSign)
		{
			numBUncut = numBUncut.Remove(numBUncut.Length - 1);
		}

		numberB = StringToFloat(numBUncut);
		numberA = ApplyOperand(numberA, numberB, operatorCharacter);
	}

	private void AppendNumber(int number)
	{
		info = string.Empty;
		if (!string.IsNullOrEmpty(input) && operatorActive)
		{
			//if output already contain some number we execute math expression
			if (!string.IsNullOrEmpty(output))
			{
				try
				{
					ExecuteExpression(ref numA, ref numB, operatorActive, input, operatorChar);

					operatorChar = input[input.Length - 1];
				}
				catch (DivideByZeroException)
				{
					Clear();
					info = "You cannot divide by 0!";
				}

				//TODO vymyslieť prepisovanie operatora a zadať reštrikcie pre hranice čis. datoveho typu float(inak to pada!)
				operatorChar = input[input.Length - 1];

			}
			else //Here we just rewrite input into output field
			{	
				operatorChar = input[input.Length - 1];
				RemoveLastCharacter(input, out input);
				//set numA
				numA = StringToFloat(input);
			}

			output = numA.ToString() + operatorChar;
			operatorActive = false;
			input = string.Empty;
		}
		input += number.ToString();
	}


	private void CalculateResult()
	{
		if (!string.IsNullOrEmpty(input))
		{
			try
			{
				ExecuteExpression(ref numA, ref numB, operatorActive, input, operatorChar);
				output = numA.ToString() + operatorChar;
			}
			catch (DivideByZeroException)
			{
				Clear();
				info = "You cannot divide by 0!";
			}
			
		}
	}



	private void AppendOperation(char operation)
	{
		operatorActive = true;
		if (!string.IsNullOrEmpty (input))
		{
			CheckLastChar(input[input.Length- 1]);
		}
		input += operation;
	}

	/// <summary>
	/// Function clears variables
	/// </summary>
	private void Clear()
	{
		input = string.Empty;
		result = string.Empty;
		output = string.Empty;
		numA = 0;
		numB = 0;
	}

	//Funcs for Appending operations onto buttons

	private void Sum(MouseEventArgs e)
	{
		AppendOperation('+');
	}
	private void Sub(MouseEventArgs e)
	{
		AppendOperation('-');
	}
	private void Pow(MouseEventArgs e)
	{
		AppendOperation('*');
	}
	private void Div(MouseEventArgs e)
	{
		AppendOperation('/');
	}
	// private void BracketL(MouseEventArgs e)
	// {
	// 	AppendOperation('(');
	// }
	// private void BracketR(MouseEventArgs e)
	// {
	// 	AppendOperation(')');
	// }

	private void ClearEnd(MouseEventArgs e)
	{
		RemoveLastCharacter(input, out input);
	}

	/// <summary>
	/// Remove last character from input
	/// </summary>
	private void RemoveLastCharacter(string input, out string output)
	{
		output = string.Empty;
		if (!string.IsNullOrEmpty(input))
		{
			output = input.Remove(input.Length - 1);
		}
	}

	/// <summary>
	/// Check if last character was not number or bracket.
	/// </summary>
	private bool RewriteOperator(char lastChar)
	{
		// return lastChar != 40 && lastChar != 41 && lastChar < 48 || lastChar > 57;
		return lastChar < 48 || lastChar > 57;
	}

	/// <summary>
	/// Check if last character have to be rewritten. If true, rewrite it.
	/// </summary>
	private void CheckLastChar(char lastChar)
	{
		if (RewriteOperator(lastChar)) { info = "operator changed"; RemoveLastCharacter(input,out input); }
	}

}
