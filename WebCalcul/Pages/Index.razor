@using WebCalcul.Data
@inject WebCalculDbContext dbContext
@page "/"

<h1 class="app-name">WebCalcul App</h1>

<div class="calculator-grid">
	<div class="info-display">
		<div class="info-text">@info</div>
		<div class="output-text">@output</div>

	</div>

	<input type="text" class="display-input" @bind="input" readonly />

	<!-- Memory and operations -->
	<div class="button @MemoryButtonClass" @onclick="MRC">MCR</div>
	<div class="button" @onclick="MemMinus">M-</div>
	<div class="button" @onclick="MemPlus">M+</div>
	<div class="button operator" @onclick="() => AppendOperation('/')">/</div>
	<div class="button operator" @onclick="Percentage">%</div>


	<div class="button" @onclick="() => AppendNumber(7)">7</div>
	<div class="button" @onclick="() => AppendNumber(8)">8</div>
	<div class="button" @onclick="() => AppendNumber(9)">9</div>
	<div class="button operator" @onclick="() => AppendOperation('x')">x</div>
	<div class="button operator" @onclick="Root">√</div>

	<div class="button" @onclick="() => AppendNumber(4)">4</div>
	<div class="button" @onclick="() => AppendNumber(5)">5</div>
	<div class="button" @onclick="() => AppendNumber(6)">6</div>
	<div class="button operator" @onclick="() => AppendOperation('+')">+</div>
	<div class="button operator" @onclick="Clear">C</div>

	<div class="button" @onclick="() => AppendNumber(1)">1</div>
	<div class="button" @onclick="() => AppendNumber(2)">2</div>
	<div class="button" @onclick="() => AppendNumber(3)">3</div>
	<div class="button operator" @onclick="() => AppendOperation('-')">-</div>
	<div class="button operator" @onclick="ClearEntryClick">CE</div>

	<!-- Bottom row -->
	<div class="button doubled-row" @onclick="() => AppendNumber(0)">0</div>
	<div class="button operator" @onclick="InsertDot">.</div>
	<div class="button operator doubled-row" @onclick="() => AppendOperation('=')">=</div>
</div>


@code {

	//private variables
	/// <summary>
	/// variable provide value for GUI input field
	/// </summary>
	private string input = string.Empty;
	/// <summary>
	/// variable provide value for GUI output field
	/// </summary>
	private string output = string.Empty;
	/// <summary>
	/// variable provide value for GUI info field
	/// </summary>
	private string info = string.Empty;
	/// <summary>
	/// On if operator is activeated
	/// </summary>
	private bool operatorActive = false;
	/// <summary>
	/// sign for iteration after "=" is pressed
	/// </summary>
	private bool resultIteration = false;
	/// <summary>
	/// sign for iteration after "%" is pressed
	/// </summary>
	private bool percentageIteration = false;
	/// <summary>
	/// sign for activated memory
	/// </summary>
	private bool memoryActive = false;
	/// <summary>
	/// sign for rewriting input field
	/// </summary>
	private bool rewriteInput = true;
	/// <summary>
	/// variable that execute expressions
	/// </summary>
	private Calcul cal = new Calcul();


	/// <summary>
	/// Choose which color to use on button
	/// </summary>
	private string MemoryButtonClass => cal.AnyMinMemStore() || cal.AnyPlusMemStore() ? "memory-filled" : "memory-empty";

	/// <summary>
	/// Func rewrite input varaible to 0
	/// </summary>
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		input = cal.A.ToString();
	}

	private void SaveState(Action operation)
	{
		var state = new CalculState();

		state.SaveStateBeforeExec(cal, operatorActive, resultIteration, percentageIteration, memoryActive, rewriteInput);

		operation();

		state.UpdateStateResultAfterExec(cal.A);

		dbContext.CalculStates.Add(state);
		dbContext.SaveChanges();
	}




	/// <summary>
	/// Function change string to decimal
	/// </summary>
	private decimal StringToDecimal(string input)
	{
		decimal outputDecimal = 0;
		try
		{
			outputDecimal = decimal.Parse(input);
		}
		catch (FormatException)
		{
			Clear();
			output = "Error while parsing expression :" + input;
			return 0;
		}
		return outputDecimal;
	}

	/// <summary>
	/// Func for rewriting output field.
	/// </summary>
	private void RewriteOutput()
	{
		output = cal.A.ToString() + cal.ActiveOperator.ToString();
	}
	/// <summary>
	/// Func for rewriting input field.
	/// </summary>
	private void RewriteInputToAValue()
	{
		input = cal.A.ToString();
	}

	/// <summary>
	/// Func for rewriting output field - for "=" version.
	/// </summary>
	private void RewriteOutputResult()
	{
		if (!cal.CheckOperatorActive()) output = cal.A.ToString();
		else output = cal.A.ToString() + cal.ActiveOperator.ToString() + cal.B.ToString() + '=';
	}

	/// <summary>
	/// Func append number into input field.
	/// </summary>
	private void AppendNumber(decimal number)
	{
		//if we add number operator is no longer active so next time we hit operator button
		// it wouldn't cast rewrite of operator but execute computation
		operatorActive = false;

		if (rewriteInput)
		{
			rewriteInput = false;
			ClearEntry();
		}

		if (input == "0") input = string.Empty;
		input += number.ToString();
	}

	/// <summary>
	/// Func append operation into output field and change value in calculator class.
	/// Funck applies operator if needed.
	/// </summary>
	private void AppendOperation(char operation)
	{
		if (operation == '=')
		{
			if (resultIteration)
			{
				cal.A = StringToDecimal(input); //this must be here for iter calculation
				RewriteOutputResult();

				ApplyOperandOfCal(cal);

				RewriteInputToAValue();
				return;
			}
			cal.B = StringToDecimal(input);
			resultIteration = true;
			RewriteOutputResult();

			ApplyOperandOfCal(cal);

			if (!cal.CheckOperatorActive()) output = cal.A.ToString();
			RewriteInputToAValue();
		}

		//if operator is active than rewrite it
		else if (operatorActive && !resultIteration)
		{
			cal.ActiveOperator = operation;
			RewriteOutput();
			return;
		}

		else
		{
			operatorActive = true;
			rewriteInput = true;

			cal.B = StringToDecimal(input);

			if (!resultIteration)
			{

				ApplyOperandOfCal(cal);

			}

			cal.ActiveOperator = operation;
			RewriteOutput();
			resultIteration = false;

			RewriteInputToAValue();
		}
	}

	/// <summary>
	/// Func apply active operand and catch potentiall erros
	/// </summary>
	private void ApplyOperandOfCal(Calcul cal)
	{
		try
		{
			// cal.ApplyOperand();
			SaveState(() => cal.ApplyOperand()); //check if it works without ref TODO! //INJECT
		}
		catch (DivideByZeroException)
		{
			Clear();
			info = "You cannot divide by 0!";
		}
		catch (OverflowException)
		{
			Clear();
			info = "You exceed range of decimal data type!";
		}
	}


	/// <summary>
	/// Function clears variables
	/// </summary>
	private void Clear()
	{
		input = "0";
		output = string.Empty;
		info = string.Empty;
		operatorActive = false;
		resultIteration = false;
		percentageIteration = false;
		memoryActive = false;
		cal = new Calcul();
	}

	//Adding functionality to buttons
	private void Sum(MouseEventArgs e)
	{
		AppendOperation('+');
	}
	private void Sub(MouseEventArgs e)
	{
		AppendOperation('-');
	}
	private void Pow(MouseEventArgs e)
	{
		AppendOperation('*');
	}
	private void Div(MouseEventArgs e)
	{
		AppendOperation('/');
	}

	/// <summary>
	/// Func implement "%" button functionality
	/// </summary>
	private void Percentage(MouseEventArgs e)
	{
		if (!cal.CheckOperatorActive())
		{
			info = "There is nothing to calculate percentage of!";
			input = "0";
			return;
		}
		else
		{
			if (!percentageIteration)
			{
				cal.B = StringToDecimal(input);
				percentageIteration = true;
			}

			output = cal.A.ToString() + cal.ActiveOperator + cal.B.ToString() + '%';
			try
			{

				SaveState(() => cal.ApplyPercentageOperand()); //INJECT
				input = cal.A.ToString();
			}
			catch (OverflowException)
			{
				Clear();
				info = "You exceed range of decimal data type!";
			}
			operatorActive = true;
		}
	}

	/// <summary>
	/// Funck implement square root button functionality
	/// </summary>
	/// <param name="e"></param>
	private void Root(MouseEventArgs e)
	{
		cal.A = StringToDecimal(input);
		output = '√' + cal.A.ToString();
		try
		{
			SaveState(() => cal.ApplyRoot()); //INJECT
			operatorActive = true;
			rewriteInput = true;
		}
		catch (OverflowException)
		{
			Clear();
			info = "You cannot square root number lower than 0!";
		}
		input = cal.A.ToString();
	}


	/// <summary>
	/// Func add dot into input, cast info if already dot involved
	/// </summary>
	/// <param name="e"></param>
	private void InsertDot(MouseEventArgs e)
	{
		if (operatorActive) input = "0"; rewriteInput = false; operatorActive = false;
		if (!input.Contains('.'))
		{
			input += '.';
		}
		else
		{
			info = "fractions already active!";
		}
	}

	/// <summary>
	/// Func set input to "0"
	/// </summary>
	private void ClearEntryClick(MouseEventArgs e)
	{
		input = "0";
	}

	/// <summary>
	/// Func to set input empty.
	/// </summary>
	private void ClearEntry()
	{
		input = string.Empty;
	}

	/// <summary>
	/// Func add value from input into desired memory
	/// </summary>
	/// <param name="e"></param>
	private void MemMinus(MouseEventArgs e)
	{
		if (!memoryActive || !operatorActive) { memoryActive = true; operatorActive = true; }

		cal.AppendIntoMinMem(StringToDecimal(input));
		info = "Value vas added into memory for minus numbers!";
		rewriteInput = true;
	}

	/// <summary>
	/// Func add value from input into desired memory
	/// </summary>
	/// <param name="e"></param>
	private void MemPlus(MouseEventArgs e)
	{
		if (!memoryActive || !operatorActive) { memoryActive = true; operatorActive = true; }
		cal.AppendIntoPlusMem( StringToDecimal(input));
		info = "Value vas added into memory for plus numbers!";
		rewriteInput = true;
	}

	/// <summary>
	/// Func calculate sum of M- and M+ and rewrite input and output field. 
	/// Doubletap removes memory flag and clears memory.
	/// </summary>
	private void MRC(MouseEventArgs e)
	{
		if (e.Detail == 2)
		{
			memoryActive = false;
			rewriteInput = true;
			cal.RemoveMemory();
			info = "Memory cleared!";
			return;
		}

		if (cal.AnyMinMemStore() || cal.AnyMinMemStore())
		{
			try
			{
				output = cal.ResultFromMemory().ToString();
				rewriteInput = true;
			}
			catch (OverflowException)
			{
				Clear();
				info = "You cannot square root number lower than 0!";
			}
			input = cal.A.ToString();
			info = "Result from memory:";
		}
		else
		{
			info = "Memory is empty!";
		}

	}
	}
}
