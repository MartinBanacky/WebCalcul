@using WebCalcul.Data
@page "/"

<style>
	.calculator-input {
		text-align: right;
	}
</style>

<h3>Calculator</h3>

<input type="text" class="calculator-input" @bind="input" readonly />
<p>Calculate: @output</p>

@for (int i = 0; i <= 9; i++)
{
    var num = i;
    if (i == 0)
    {
        <br />
    }
	if (i == 1)
	{
		<br />
	}
    <Button @onclick="() => AppendNumber(num)">@num</Button>
    if (i % 3 == 0)
    {
        <br />
    }
}

<button @onclick="CalculateResult">=</button>
<button @onclick="Clear">C</button>
<button @onclick="Sum">+</button>
<button @onclick="Sub">-</button>
<button @onclick="Pow">*</button>
<button @onclick="Div">/</button>
@* <button @onclick="BracketL">(</button>
<button @onclick="BracketR">)</button> *@
<button @onclick="ClearEnd">CE</button>
<button @onclick="InsertDot">,</button>


<p>Result: @result</p>
<p>Info: @info</p>


@code {



	private string input = string.Empty;
	private string output = string.Empty;
	private string result = string.Empty;
	private string info = string.Empty;
	private bool operatorActive = false;
	private bool fractionsActive = false;
	private Calcul cal = new Calcul();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		input = cal.A.ToString();
	}

	private double StringToDouble(string input)
	{
		double outputDouble = 0;
		try
		{
			outputDouble = double.Parse(input);
		}
		catch (FormatException)
		{
			Console.WriteLine($"Unable to parse '{input}'");
			return 0;
		}
		return outputDouble;
	}

	private void ExecuteExpression(ref Calcul calcul, string inputField)
	{
		calcul.B = StringToDouble(input);
		calcul.A = calcul.ApplyOperand();	
	}

	private void UpdateOutput()
	{
		ExecuteExpression(ref cal, input);
		output = cal.A.ToString() + cal.ActiveOperator;
	}
	private void UpdateSign()
	{
		info = "Operator has been changed.";
		output = cal.A.ToString() + cal.ActiveOperator;
	}

	private void AppendNumber(double number)
	{
		if (operatorActive)
		{
			input = string.Empty;
			operatorActive = false;
		}

		// info = string.Empty;
		// if (!string.IsNullOrEmpty(input) && operatorActive)
		// {
		// 	//if output already contain some number we execute math expression
		// 	if (!string.IsNullOrEmpty(output))
		// 	{
		// 		try
		// 		{
		// 			ExecuteExpression(ref cal, operatorActive, input);

		// 			cal.ActiveOperator = input[input.Length - 1];
		// 		}
		// 		catch (DivideByZeroException)
		// 		{
		// 			Clear();
		// 			info = "You cannot divide by 0!";
		// 		}

		// 		//TODO vymyslieť prepisovanie operatora a zadať reštrikcie pre hranice čis. datoveho typu double(inak to pada!)
		// 		cal.ActiveOperator = input[input.Length - 1];

		// 	}
		// 	else //Here we just rewrite input into output field
		// 	{	
		// 		cal.A = StringToDouble(input);
		// 	}

		// 	UpdateOutput();
		// 	operatorActive = false;
		// 	fractionsActive = false;
		// 	input = string.Empty;
		// }
		if (input == "0") input = string.Empty;
		input += number.ToString();
	}


	private void CalculateResult()
	{
		if (!string.IsNullOrEmpty(input))
		{
			try
			{
				ExecuteExpression(ref cal, input);
				output = cal.A.ToString() + cal.ActiveOperator;
			}
			catch (DivideByZeroException)
			{
				Clear();
				info = "You cannot divide by 0!";
			}

		}
	}

	//TODO vyriešiť case keď vynasobime na strasne velke cislo xxe ** 100+ a vymazeme input tak sa nic nedeje a ked adme nulu vysledok je -0!


	private void AppendOperation(char operation)
	{
		cal.ActiveOperator = operation;
		if (operatorActive) UpdateSign();
		operatorActive = true;
		UpdateOutput();
	}

	/// <summary>
	/// Function clears variables
	/// </summary>
	private void Clear()
	{
		input = "0";
		result = string.Empty;
		output = string.Empty;
		cal = new Calcul();
		fractionsActive = false;
		operatorActive = false;
		info = string.Empty;
	}

	//Funcs for Appending operations onto buttons

	private void Sum(MouseEventArgs e)
	{
		AppendOperation('+');
	}
	private void Sub(MouseEventArgs e)
	{
		AppendOperation('-');
	}
	private void Pow(MouseEventArgs e)
	{
		AppendOperation('*');
	}
	private void Div(MouseEventArgs e)
	{
		AppendOperation('/');
	}

	private void InsertDot(MouseEventArgs e)
	{
		if (!fractionsActive)
		{
			input += ',';
			fractionsActive = true;
		}
		else
		{
			info = "fractions already active!";
		}
	}
	// private void BracketL(MouseEventArgs e)
	// {
	// 	AppendOperation('(');
	// }
	// private void BracketR(MouseEventArgs e)
	// {
	// 	AppendOperation(')');
	// }

	private void ClearEnd(MouseEventArgs e)
	{
		RemoveLastCharacter(input, out input);
	}

	/// <summary>
	/// Remove last character from input
	/// </summary>
	private void RemoveLastCharacter(string input, out string output)
	{
		output = string.Empty;
		if (!string.IsNullOrEmpty(input))
		{
			output = input.Remove(input.Length - 1);
		}
	}
}
